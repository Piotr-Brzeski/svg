//
//  site_percolation.cpp
//  site_percolation
//
//  Created by Piotr Brzeski on 2022-04-09.
//

#include "../svg/spheres.h"
#include <array>
#include <map>
#include <algorithm>
#include <iostream>

namespace {

constexpr auto model_0 = std::array<std::array<int, 20>, 20>{{
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
}};

constexpr auto model_80 = std::array<std::array<int, 20>, 20>{{
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 6, 6, 0, 0, 5, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 7, 7, 0, 0, 13, 0, 0, 0, 0, 0},
  {21, 21, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 55, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0},
  {0, 40, 40, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 15, 15, 0, 0, 60, 0},
  {0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 62, 0, 0, 0},
  {0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 37, 37, 0, 0, 0, 0, 0, 0},
  {36, 36, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2},
  {36, 0, 73, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41},
  {0, 0, 0, 0, 45, 0, 0, 28, 0, 0, 4, 0, 0, 0, 44, 44, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 4, 4, 0, 0, 0, 0, 17, 0, 0, 74},
  {0, 0, 0, 0, 0, 9, 0, 18, 0, 0, 4, 4, 0, 0, 25, 25, 0, 0, 0, 0},
  {46, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 63, 0, 20, 20},
  {0, 50, 0, 0, 0, 0, 32, 0, 80, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 20},
  {11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 8, 0, 0, 0, 20},
  {0, 0, 0, 30, 0, 0, 0, 0, 0, 22, 0, 35, 0, 33, 0, 8, 0, 0, 0, 0},
  {0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 79, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 29, 0, 3, 0, 0, 0, 0, 0}
}};

constexpr auto model_160 = std::array<std::array<int, 20>, 20>{{
  {0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 155, 0, 151},
  {0, 0, 0, 0, 0, 1, 1, 0, 0, 5, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0},
  {21, 0, 131, 0, 1, 1, 1, 1, 0, 0, 7, 7, 0, 13, 13, 0, 0, 143, 0, 0},
  {21, 21, 0, 0, 0, 1, 0, 1, 0, 0, 7, 0, 0, 13, 0, 112, 0, 0, 0, 117},
  {0, 21, 21, 0, 55, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0},
  {21, 21, 21, 0, 55, 0, 0, 1, 1, 1, 0, 119, 0, 0, 2, 2, 2, 0, 60, 60},
  {0, 0, 0, 14, 0, 134, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 60, 0},
  {36, 0, 36, 0, 48, 0, 0, 0, 0, 0, 0, 37, 37, 37, 0, 2, 2, 0, 0, 0},
  {36, 36, 36, 0, 0, 0, 0, 72, 0, 0, 0, 0, 37, 0, 0, 0, 2, 2, 2, 2},
  {36, 0, 36, 0, 72, 72, 72, 72, 72, 0, 0, 0, 0, 0, 17, 0, 0, 2, 2, 0},
  {0, 0, 36, 36, 0, 72, 0, 0, 72, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 41},
  {0, 0, 0, 36, 36, 0, 0, 18, 0, 4, 4, 0, 130, 0, 17, 17, 0, 0, 0, 0},
  {0, 122, 0, 0, 36, 0, 0, 18, 18, 0, 4, 4, 0, 0, 17, 17, 17, 0, 0, 20},
  {0, 0, 94, 0, 0, 9, 0, 18, 0, 0, 4, 4, 0, 0, 17, 17, 0, 0, 0, 20},
  {11, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 63, 0, 20, 20},
  {11, 11, 11, 11, 0, 32, 32, 32, 32, 0, 19, 0, 22, 0, 0, 0, 0, 0, 20, 20},
  {11, 0, 0, 0, 106, 0, 0, 32, 32, 0, 0, 0, 22, 0, 0, 8, 8, 0, 20, 20},
  {0, 0, 0, 30, 0, 136, 0, 0, 0, 22, 22, 22, 22, 22, 0, 8, 0, 0, 0, 0},
  {0, 67, 0, 30, 30, 0, 22, 22, 22, 22, 0, 0, 0, 0, 3, 0, 79, 0, 0, 0},
  {0, 0, 133, 0, 0, 0, 0, 22, 0, 22, 0, 0, 29, 0, 3, 0, 0, 86, 0, 0}
}};

constexpr auto model_230 = std::array<std::array<int, 20>, 20>{{
  {173, 0, 0, 111, 111, 0, 0, 0, 5, 5, 0, 0, 0, 2, 2, 0, 143, 143, 143, 143},
  {0, 0, 131, 0, 0, 1, 1, 0, 0, 5, 0, 0, 0, 2, 2, 2, 0, 143, 143, 0},
  {14, 0, 131, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 2, 2, 0, 0, 143, 143, 0},
  {14, 14, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 2, 2, 2, 0, 0, 0, 117},
  {14, 14, 14, 14, 14, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 2, 0, 0},
  {14, 14, 14, 14, 14, 0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2},
  {0, 0, 0, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 2, 0},
  {2, 0, 2, 0, 14, 0, 177, 0, 2, 2, 0, 2, 2, 2, 0, 2, 2, 0, 0, 0},
  {2, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 2, 2, 2, 2, 2},
  {2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0},
  {0, 2, 2, 2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2},
  {226, 0, 0, 2, 2, 0, 0, 2, 0, 2, 2, 2, 2, 0, 2, 2, 0, 2, 0, 2},
  {0, 122, 0, 2, 2, 0, 0, 2, 2, 0, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2},
  {0, 0, 94, 0, 2, 2, 0, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2},
  {2, 0, 0, 2, 2, 0, 0, 0, 0, 10, 0, 0, 2, 0, 0, 0, 2, 0, 2, 2},
  {2, 2, 2, 2, 0, 32, 32, 32, 32, 0, 19, 0, 2, 2, 0, 0, 2, 0, 2, 2},
  {2, 0, 2, 0, 32, 32, 0, 32, 32, 0, 0, 0, 2, 0, 0, 2, 2, 2, 2, 2},
  {0, 0, 0, 30, 0, 32, 0, 0, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2},
  {30, 30, 30, 30, 30, 0, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 0, 0},
  {0, 0, 30, 0, 0, 0, 0, 2, 0, 2, 0, 0, 29, 0, 2, 0, 2, 2, 2, 2}
}};

template<class T>
int find_max_cluster(T const& t) {
  auto map = std::map<int, int>();
  for(auto& line : t) {
    for(auto cluster_id : line) {
      if(cluster_id > 0) {
        ++map[cluster_id];
      }
    }
  }
  if(map.empty()) {
    return 0;
  }
  return std::max_element(map.begin(), map.end(), [](auto a, auto b){ return a.second < b.second; })->first;
}

template<class T>
T filter_cluster(T const& t, int value = 0) {
  auto cluster = t;
  for(auto& line : cluster) {
    for(auto& cluster_id : line) {
      if(value > 0) {
        cluster_id = cluster_id == value ? 1 : 0;
      }
      else {
        cluster_id = cluster_id > 0 ? 1 : 0;
      }
    }
  }
  return cluster;
}

class percolation: public spheres {
public:
  template<class T>
  percolation(T const& percolation_model)
    : spheres(static_cast<int>(percolation_model.size()))
  {
    color(156, 225, 52);
    model(filter_cluster(percolation_model), 0, 0);
    auto cluster_id = find_max_cluster(percolation_model);
    if(cluster_id > 0) {
      color(225, 54, 0); // Red 279
      model(filter_cluster(percolation_model, cluster_id), 0, 0);
    }
    color(32, 32, 32);
    grid();
    color(0, 0, 0);
    border();
  }
};

void fig_a() {
  auto image = percolation(model_0);
//  image.set_big_description("a");
  std::cout << image.get() << std::endl;
}

void fig_b() {
  auto image = percolation(model_80);
//  image.set_big_description("b");
  std::cout << image.get() << std::endl;
}

void fig_c() {
  auto image = percolation(model_160);
//  image.set_big_description("c");
  std::cout << image.get() << std::endl;
}

void fig_d() {
  auto image = percolation(model_230);
//  image.set_big_description("d");
  std::cout << image.get() << std::endl;
}

}


int main(int argc, const char * argv[]) {
  fig_a();
  return 0;
}
